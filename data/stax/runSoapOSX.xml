<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "stax.dtd">
<stax>  

    <defaultcall function="runSoap"/>  
    
    <function name="someTest" scope="local">		<!-- Execute some test-->

        <function-map-args>
                
            <function-required-arg name="sut">
                Name of the System Under Test (localhost)
            </function-required-arg>  

            <function-required-arg name="areas">
                Name of the test areas to execute, ie. calendar, mail, etc. (None)
            </function-required-arg>

            <function-required-arg name="bits">
                Name of the Zimbra bits that are running on the SUT (network)
            </function-required-arg>  

            <function-required-arg name="machine">
                Name of the target machine
            </function-required-arg>

            <function-required-arg name="logDir">
                Name of the target machine
            </function-required-arg>

        </function-map-args>

	<sequence>
             <process name="'EXECUTE SOAP'">
                 <location>machine</location>
                 <command>'/bin/bash'</command>
                 <workdir>logDir</workdir>
                 <parms>' - /opt/qa/soapvalidator/bin/runtmssoap.sh %s -b %s -e spam,virus -o %s' %(areas, bits, logDir)</parms>
                 <stdout>'/tmp/soapdata.txt'</stdout>
                 <stderr mode="'stdout'"/> 
            </process> 
	</sequence>

    </function>

    <function name="fullTest" scope="local">		<!-- Execute all tests -->
		<sequence>
            <log>'Run Full Test'</log>
            <process name="'SOAP EXECUTE FULL'">
                <location>machine</location>
                <command>'/bin/bash'</command>
                <workdir>'/opt/qa/soapvalidator/bin'</workdir>
                <parms>' - runtmssoap.sh -b %s -o %s' %(bits, logDir)</parms>
                <stdout>'/tmp/soapdata.txt'</stdout>
                <stderr mode="'stdout'"/>  
            </process>			
            <!--script>passFail = STAXResult</script-->			
            <return>STAXResult</return>
		</sequence>

    </function>

    <function name="runSoap" scope="local">
    
        <function-prolog>
            Main entry point to set up global variables
        </function-prolog>
        
        <function-map-args>
                
            <function-optional-arg name="sut" default="'localhost'">
                Name of the System Under Test (localhost)
            </function-optional-arg>

            <function-optional-arg name="areas" default="'NONE'">
                Name of the test areas to execute, ie. calendar, mail, etc. (None)
            </function-optional-arg>

            <function-optional-arg name="logareas" default="'INSTALL'">
               path name for areas for logging purpose
            </function-optional-arg>

            <function-optional-arg name="bits" default="'network'">
                Name of the Zimbra bits that are running on the SUT (network)
            </function-optional-arg>  

            <function-optional-arg name="machine" default="'qa99'">
                Name of the target machine
            </function-optional-arg>

            <function-optional-arg name="OS" default="'MACOSX'">
                Name of the operation system
            </function-optional-arg>        

            <function-optional-arg name="build" default="'foo'">
                Name of the build
            </function-optional-arg>        

            <function-optional-arg name="branch" default="'mebranch'">
                Name of the branch
            </function-optional-arg>

            <function-optional-arg name="timestamp" default="'whenever'">
                Time Stamp
            </function-optional-arg>

            <function-optional-arg name="needNotify" default="'1'">
                Is notification required? 1= yes others = no
            </function-optional-arg>  

            <function-optional-arg name="notificationAlias" default="'qa-automation@zimbra.com'">
                This is email notification alias
            </function-optional-arg>  

            <function-optional-arg name="smokeOrFull" default="'1'">
                Run Smoke or Full test, 1 == smoke 0 == full 
            </function-optional-arg>  

            <function-optional-arg name="needSetUp" default="'1'">
               Need setting up test ware
            </function-optional-arg>
			
			<function-optional-arg name="tms" default="'tms.liquidsys.com'">Location of TMS server </function-optional-arg>
            <function-optional-arg name="tmsStax" default="'tms.liquidsys.com'">Location of STAX server </function-optional-arg>

        </function-map-args>
        
	    <sequence>            
            <if expr="needSetUp=='1'">
                <sequence>       
                <process name ="'Remove Current Testware'">
                    <location>machine</location>
                    <command>'/bin/rm'</command>
                    <workdir>'/opt/qa'</workdir>
                    <parms>'-r -f soapvalidator'</parms>
                </process> 
                
                <script>
                    origDir = "/qa/%s/soapvalidator/" % branch
                    cutDir = "2"
			    </script>
	            <stafcmd>
	                <location>tms</location>
	                <service>'fs'</service>
	                <request>'query entry /opt%s'%origDir</request>
	            </stafcmd>
	            <if expr="RC != 0">
	            	<script>
						origDir = "/qa/soapvalidator/"
					    cutDir = "1"
					</script>
	            </if>
	            <log>'Copy Testware'</log>
                
                <log>'--no-proxy -r http://%s%s  --level=0 - --waitretry=1 --tries=0 -q -nH -np -P /opt/qa -R index.html --cut-dir=%s' % (tms, origDir, cutDir)</log>
                <process name="'Copy Testware'">
                    <location>machine</location>
                    <command>'wget'</command>
                    <workdir>'/var/tmp'</workdir>
                    <parms>'--no-proxy -r http://%s%s  --level=0 - --waitretry=1 --tries=0 -q -nH -np -P /opt/qa -R index.html --cut-dir=%s' % (tms, origDir, cutDir)</parms>
                </process>         

                <script>fullName = "%s.liquidsys.com"%machine</script>
                <script>replaceMe = "perl -pi.bak1 -e 's#localhost#%s#' global.properties\nperl -pi.bak2 -e 's#([^.])zimbra.com#$1%s#' global.properties \nperl -pi.bak3 -e 's#propertiesFolder=.*#propertiesFolder=/opt/qa/soapvalidator/tmp#' global.properties"%(fullName,fullName)</script>

                <stafcmd>
                    <location>machine</location>
                    <service>'fs'</service>
                    <request>'query entry /opt/qa/soapvalidator/conf/global.properties.%s'%fullName</request>
                </stafcmd>
                <if expr="RC == 0">
                    <sequence>
                        <stafcmd>
                            <location>machine</location>
                            <service>'fs'</service>
                            <request>'COPY FILE /opt/qa/soapvalidator/conf/global.properties.%s TOFILE /opt/qa/soapvalidator/conf/global.properties TOMACHINE %s'%(fullName, machine)</request>
                        </stafcmd>
                    </sequence>
                </if>
                    
                <process name ="'Create customization script'">
                    <location>machine</location>
                    <command>'/bin/echo'</command>
                    <workdir>'/opt/qa/soapvalidator/conf'</workdir>
                    <parms>replaceMe</parms>
                    <stdout>'/tmp/replaceMe.ksh'</stdout>
                </process>
               <!--  
               <process name="'Global file customization'">
                    <location>machine</location>
                    <command>'/bin/bash'</command>
                    <workdir>'/opt/qa/soapvalidator/conf'</workdir>
                    <parms>'/tmp/replaceMe.ksh'</parms>                 
                </process>   
-->
                <process name="'Make tmp'">
                    <location>machine</location>
                    <command>'/bin/env'</command>
                    <workdir>'/opt/qa/soapvalidator'</workdir>
                    <parms>'mkdir /opt/qa/soapvalidator/tmp'</parms>
                </process>
                </sequence>
            </if>
  
  				<log>'Reset STAF'</log>
  				<stafcmd name="'Purge Cache'">
                        <location>tmsStax</location>
                        <service>'misc'</service>
                        <request>'purge endpointcache endpoint tcp://%s' % machine</request>
            </stafcmd>
            
  				<stafcmd name="'Shutdown STAF'">
  					<location>machine</location>
                <service>'shutdown'</service>
                <request>'shutdown'</request>
  				</stafcmd>
  				
  				<stafcmd name="'Purge Cache'">
                        <location>tmsStax</location>
                        <service>'misc'</service>
                        <request>'purge endpointcache endpoint tcp://%s' % machine</request>
            </stafcmd>
  				
  				<timer duration="'15m'">
                <loop>
                    <sequence>
                    <stafcmd name="'Sleep 20 seconds'">
                        <location>tmsStax</location>
                        <service>'DELAY'</service>
                        <request>'DELAY 20000'</request>
                    </stafcmd>
                    <stafcmd name="'Purge Cache'">
                        <location>tmsStax</location>
                        <service>'misc'</service>
                        <request>'purge endpointcache endpoint tcp://%s' % machine</request>
                    </stafcmd>
                    
                    <stafcmd name="'Ping'">
                        <location>machine</location>
                        <service>'PING'</service>
                        <request>'PING'</request>
                    </stafcmd>
                    <if expr="RC == STAFRC.Ok">
                        <break/>
                    </if>                    
                    </sequence>
                </loop>               
            </timer>             
 
            <if expr="areas=='NONE'">
                <sequence>
                    <if expr="smokeOrFull == '1'">
                        <sequence>
                            <script>areas="SMOKE"</script>   
                            <if expr="logareas == 'INSTALL'">
                                <script>logareas = areas.lower()</script>
                            </if>
                            <script>areas = "-t " + areas.lower() + " -f /opt/qa/soapvalidator/data/soapvalidator"</script>
                        </sequence>
                        <else>
                             <sequence>
                                <script>areas="FULL"</script> 
                                <script>logareas = areas.lower()</script>
                                <script>areas = " -f /opt/qa/soapvalidator/data/soapvalidator"</script>
                             </sequence>
                        </else>
                    </if>
                </sequence>
                <else>
                    <sequence>
                        <script>logareas = 'upgrade'</script>
                        <script>
                            import re
                            areas = "-f " + areas.split(' ')[1]
                         </script>
                    </sequence>
                </else>
            </if> 
            <script>logDir = "/opt/qa/testlogs/%s/%s/%s/soap/%s/%s/%s/" % (OS, branch, build, logareas, timestamp, machine)</script>     
            <script>meURL = "http://%s/testlogs/%s/%s/%s/soap/%s/%s/%s/ " % (tms, OS, branch, build, logareas, timestamp, machine)</script> 
            <process name ="'Create Log Directory'">
                <location>tms</location> 
                <command>'/bin/mkdir'</command>
                <workdir>'/opt/qa'</workdir>
                <parms>'-p %s'% (logDir)</parms>
            </process>  

            <call function="'someTest'"> 
                {'sut' : sut, 'areas' : areas, 'bits' : bits, 'machine' : machine, 'logDir' : logDir}
            </call> 
            <script>
                topdir='soapvalidator'
                if logareas == 'upgrade':
                     topdir = 'zimbraInstall'
            </script>
            <log>'Run Soap report'</log>

            <script>reportcmd = "/opt/qa/%s/soapvalidator/bin/runreports.sh" % branch</script>
            <stafcmd>
                <location>tms</location>
                <service>'fs'</service>
                <request>'query entry %s'%reportcmd</request>
            </stafcmd>
            <if expr="RC != 0">
            	<script>reportcmd = "/opt/qa/soapvalidator/bin/runreports.sh"</script>
            </if>
            
            <process name="'Run Generation Logic'">
                <location>tms</location>
		        <command>'/bin/env'</command>              
                <parms>'perl %s %s%s' % (reportcmd, logDir, topdir)</parms>         
                <workdir>'%s' % logDir</workdir> 
	            <stdout>'%sreportlog.txt' % logDir</stdout>                
            </process>   
 
            <if expr="needNotify == '1'">
                <sequence>  
                    <log message="1">'Publish Result'</log>    
                    <script>mlogareas = logareas.upper()</script>                                
                    <process name="'Test Summary'">
                        <location>tms</location>
                        <command>'/bin/env'</command>
                        <workdir>logDir</workdir>
                        <parms>'ruby /opt/qa/%s/genesis/reportResult.rb testsummary.txt SOAP %s %s %s %s %s'% (branch, OS, build, branch, mlogareas, meURL)</parms>
                    </process>     
                    <script>omessage = "Build %s tested on machine %s.  Log file is at %s\n" % (build, machine, meURL)</script>        
                    <log>'Get report File'</log>
                    <stafcmd>
                        <location>machine</location>
                        <service>'fs'</service>
                        <request>'GET FILE %sBugReports/BugReport.txt'% (logDir)</request> 
                    </stafcmd>             
                    <script>soapres=STAFResult</script>
                    <script>omessage="%s\n%s"%(omessage, soapres)</script>

                    <timer duration="'5m'">
                        <stafcmd name="'Send Completion Email'">
                            <location>tmsStax</location>
                            <service>'EMAIL'</service>
                            <request>'SEND TO %s FROM qa-tms@zimbra.com message "%s" SUBJECT "%s Soap %s completed"'% (notificationAlias, omessage, machine, logareas)</request>
                        </stafcmd>
                    </timer> 
                </sequence>
            </if>
            <script>omessage = "Build %s tested on machine %s.  Log file is at %s\n" % (build, machine, meURL)</script>        
            <return>omessage</return>

		</sequence>

    </function>

</stax>   
